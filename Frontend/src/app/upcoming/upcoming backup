import { Component,Input, Output,OnInit ,SimpleChanges ,SimpleChange} from '@angular/core';
import { GrabitService } from '../service/grabit.service';
import { Router } from '@angular/router';
declare let $:any;
@Component({
  selector: 'app-upcoming',
  templateUrl: './upcoming.component.html',
  styleUrls: ['./upcoming.component.css']
})
export class UpcomingComponent implements OnInit {
    @Input() start
    @Input() end;
    
    public soon_reg_start_indices = [];
    public soon_reg_start_sec_shower:number[]=[];
    public soon_reg_start_min_shower:number[]=[];
    public soon_reg_start_hour_shower:number[]=[];
    public soon_reg_start_looper = [];

    public soon_reg_end_indices = [];
    public soon_reg_end_sec_shower:number[]=[];
    public soon_reg_end_min_shower:number[]=[];
    public soon_reg_end_hour_shower:number[]=[];
    public soon_reg_end_looper = [];

    public soon_auc_start_indices = [];
    public soon_auc_start_sec_shower:number[]=[];
    public soon_auc_start_min_shower:number[]=[];
    public soon_auc_start_hour_shower:number[]=[];
    public soon_auc_start_looper = [];

    public alreadyRegistered:boolean = false;
    public buybidpacknotify:boolean = false;
    public uradminnotify:boolean = false;
    public regreqsuccessnotify:boolean = false;
    public regreqfailnotify:boolean = false;
    public carousel_array_length;
    public block={};
    // public notification:boolean;
    // public timeToRefresh:number = 0;
    // public refreshTimer;
    // public canTriggerRefresh:boolean = true;
    // public noUpcoming:boolean = false;
    // public waitForUpcoming:boolean=true;
    // public myRegDealArray = [];
    // public noActiveDeal:boolean = false;
    // public sec_shower:number[]=[];
    // public min_shower:number[]=[];
    // public hour_shower:number[]=[];
    // public looper = [];
    // public looperforliveend = [];
    // public looperindicesforliveend = [];
    // public sec_shower_live = [];
    // public min_shower_live = [];
    // public hour_shower_live = [];

    // last_bidder_message=false;
    // basePrice_reached =false;
    // bidNotPlacedMsg = false;
    // bidPlacedMsg=false;


    
    // public notRegisteredforthisauction:boolean =false;
    // public buybidpacknotifyforbidding:boolean =false;
    // public uradminnotifyforbidding:boolean =false;

    // public closeddeals =[];
    // public nocloseddeal:boolean = false;
    // public triggerIncrementer:number = 0;

// public auctionid;
// public hash
// public required;
// public registered;
// public aucstarttime;
// public regstarttime;
// public regendtime;
// public minBid;
// public regtxt;
// public regbtnshow;
// public beforereg;
// public isclosed;
// public timertxt;
// public isTimeTextforregstart;
// public isTimeText;
// public isRequiredmet;
  constructor(private grab:GrabitService,private route:Router) { }

//   show_auctions_upcoming(data){
//     let instance = this;
//     console.log(data);
    
//           instance. auctionid='';
//           instance.hash=''
//           instance.required='';
//           instance.registered='';
//           instance.aucstarttime='';
//           instance.regstarttime='';
//           instance.regendtime='';
//           instance.minBid='';
//           instance.regtxt='';
//           instance.regbtnshow='';
//           instance.beforereg='';
//           instance.isclosed='';
//           instance.timertxt='';
//           instance.isTimeTextforregstart='';
//           instance.isTimeText='';
//           instance.isRequiredmet='';

//           instance.timeToRefresh = 0;
//           instance.carousel_array.length = 0;


//           instance.deta['hash']=
//           instance.deta['minBid']=
//           instance.deta['registered']=
//           instance.deta['required']=
//           instance.deta['regstarttime']=
//           instance.deta['auctionid']=
//           instance.deta['regendtime']=
//           instance.deta['regtxt']=
//           instance.deta['aucstarttime']=












//         instance.auctionid=data.auctionid;
//         instance.hash=data.hash;
//         alert(instance.hash)
//         instance.required=data.required;
//         instance.registered=data.registered;
//         instance.aucstarttime=data.aucstarttime;
//         instance.regstarttime=data.regstarttime;
//         instance.regendtime=data.regendtime;
//         instance.minBid=data.minBid;
//         instance.regtxt=data.regtxt;
//         instance.regbtnshow=data.regbtnshow;
//         instance.beforereg=data.beforereg;
//         instance.isclosed=data.isclosed;
//         instance.timertxt=data.timertxt;
//   }


// aucstarttime: Thu Jan 24 2019 11:28:00 GMT+0530 (India Standard Time) {}
// auctionid: 27
// beforereg: false
// hash: "QmYpd1MLuKfpE4JJT6peMe59XCHqEBmEcgTqqA1ecM7itt"
// isTimeText: false
// isTimeTextforregstart: false
// isclosed: false
// minBid: "4"
// now: 1548307125
// regbtnshow: true
// regendtime: Thu Jan 24 2019 11:23:00 GMT+0530 (India Standard Time) {}
// registered: "1"
// regstarttime: Thu Jan 24 2019 09:23:00 GMT+0530 (India Standard Time) {}
// regtxt: "register"
// required: "1"
// result: p {0: Array(4), 1: "45000", 2: "4", 3: Array(4), 4: "13", 5: Array(2), 6: "0", times: Array(4), basePrice: "45000", bidIncrement: "4", bidBounds: Array(4), resetTime: "13", â€¦}
// timertxt: 2

 


  soon_auc_reg_starttimer(auctionid,timeforregstart,carousel_length){
    let meta =  this;
    let timeLeft = timeforregstart;
    meta.soon_reg_start_sec_shower[auctionid]=timeLeft%60;
    let min_str:string = (timeLeft/60).toString();
    let min = min_str.split(".");
    let minutes=Number(min[0])
    meta.soon_reg_start_min_shower[auctionid]=minutes%60;
    let hours_str:string = (timeLeft/3600).toString();
    let hours= hours_str.split(".");
    meta.soon_reg_start_hour_shower[auctionid] = Number(hours[0]);

    meta.soon_reg_start_looper[auctionid] = setInterval(()=>{
        if(meta.soon_reg_start_hour_shower[auctionid] ==0 && meta.soon_reg_start_min_shower[auctionid]==0 && meta.soon_reg_start_sec_shower[auctionid]==0)
        {
            // meta.myRegDealArray[arr_index]['nextbidamount']=0;
            // meta.myRegDealArray[arr_index]['btnhide'] = true;
            // (document.getElementById(meta.images[arr_index]['buttonbid']) as HTMLButtonElement).value='Closed';
            // (document.getElementById(meta.images[arr_index]['buttonbid']) as HTMLButtonElement).disabled=true;
            clearInterval(meta.soon_reg_start_looper[auctionid]); 
            
            meta.block['timertxt'] =2;
            meta.grab.auctionDetails(auctionid).then(result => {
                meta.grab.currentTime().then(now=>{
                    let __timeLeft = Number(result['times'][3])-Number(now);
                    meta.block['regbtnshow']= true;
                    if(__timeLeft<86400){
                        meta.block['isTimeText'] = false;
                        meta.soon_reg_end_indices.push(auctionid);
                        meta.soon_auc_reg_endtimer(auctionid,__timeLeft,carousel_length,'starttimer')    
                    }
                    else{
                        meta.block['isTimeText'] = true;
                    }
                })
            })                 
        }
        if(meta.soon_reg_start_sec_shower[auctionid]!=0){
            meta.soon_reg_start_sec_shower[auctionid]--;
        }
        else{
            if(meta.soon_reg_start_hour_shower[auctionid] !=0 || meta.soon_reg_start_min_shower[auctionid] !=0 ){
                meta.soon_reg_start_sec_shower[auctionid]=59;
                if(meta.soon_reg_start_min_shower[auctionid] != 0){
                    meta.soon_reg_start_min_shower[auctionid]--;
                }
                else{
                    if(meta.soon_reg_start_hour_shower[auctionid] !=0){
                        meta.soon_reg_start_min_shower[auctionid] = 59;
                        meta.soon_reg_start_hour_shower[auctionid]--;
                    } 
                    else {
                        
                    }
                }
            }
        }
    
    },1000);
  }

  navigatetohome(){
    let meta = this;
    meta.navigateToUpcoming();
    meta.route.navigate(['/signingout']);
  }
  
  navigateToUpcoming(){
    let meta = this;
    meta.grab.upcomingDivTarget = true;
  }

  soon_auc_live_start_timer(auctionid,timeforauclivestart,carousel_length){
    let meta =  this;
    let timeLeft = timeforauclivestart;
    meta.soon_auc_start_sec_shower[auctionid]=timeLeft%60;
    let min_str:string = (timeLeft/60).toString();
    let min = min_str.split(".");
    let minutes=Number(min[0])
    meta.soon_auc_start_min_shower[auctionid]=minutes%60;
    let hours_str:string = (timeLeft/3600).toString();
    let hours= hours_str.split(".");
    meta.soon_auc_start_hour_shower[auctionid] = Number(hours[0]);

    meta.soon_auc_start_looper[auctionid] = setInterval(()=>{
        if(meta.soon_auc_start_hour_shower[auctionid] ==0 && meta.soon_auc_start_min_shower[auctionid]==0 && meta.soon_auc_start_sec_shower[auctionid]==0)
        {
            // meta.myRegDealArray[arr_index]['nextbidamount']=0;
            // meta.myRegDealArray[arr_index]['btnhide'] = true;
            // (document.getElementById(meta.images[arr_index]['buttonbid']) as HTMLButtonElement).value='Closed';
            // (document.getElementById(meta.images[arr_index]['buttonbid']) as HTMLButtonElement).disabled=true;
            clearInterval(meta.soon_auc_start_looper[auctionid]); 

            meta.block['regbtnshow'] =false;
            meta.navigatetohome();
            // meta.carousel_array[carousel_length]['timertxt'] =3;
            
        }
        if(meta.soon_auc_start_sec_shower[auctionid]!=0){
            meta.soon_auc_start_sec_shower[auctionid]--;
        }
        else{
            if(meta.soon_auc_start_hour_shower[auctionid] !=0 || meta.soon_auc_start_min_shower[auctionid] !=0 ){
                meta.soon_auc_start_sec_shower[auctionid]=59;
                if(meta.soon_auc_start_min_shower[auctionid] != 0){
                    meta.soon_auc_start_min_shower[auctionid]--;
                }
                else{
                    if(meta.soon_auc_start_hour_shower[auctionid] !=0){
                        meta.soon_auc_start_min_shower[auctionid] = 59;
                        meta.soon_auc_start_hour_shower[auctionid]--;
                    } 
                    else {
                        
                    }
                }
            }
        }
    },1000);
  }

  soon_auc_reg_endtimer(auctionid,timeforregend,carousel_length,x){
    let meta =  this;
    let timeLeft = timeforregend;
    meta.soon_reg_end_sec_shower[auctionid]=timeLeft%60;
    let min_str:string = (timeLeft/60).toString();
    let min = min_str.split(".");
    let minutes=Number(min[0])
    meta.soon_reg_end_min_shower[auctionid]=minutes%60;
    let hours_str:string = (timeLeft/3600).toString();
    let hours= hours_str.split(".");
    meta.soon_reg_end_hour_shower[auctionid] = Number(hours[0]);

    meta.soon_reg_end_looper[auctionid] = setInterval(()=>{

        meta.grab.auctionDetails(auctionid).then(result =>{
            meta.block['registered']=result['bidBounds'][3];
            meta.block['required']=result['bidBounds'][1];
        });
        if(meta.soon_reg_end_hour_shower[auctionid] ==0 && meta.soon_reg_end_min_shower[auctionid]==0 && meta.soon_reg_end_sec_shower[auctionid]==0)
        {
            // meta.myRegDealArray[arr_index]['nextbidamount']=0;
            // meta.myRegDealArray[arr_index]['btnhide'] = true;
            // (document.getElementById(meta.images[arr_index]['buttonbid']) as HTMLButtonElement).value='Closed';
            // (document.getElementById(meta.images[arr_index]['buttonbid']) as HTMLButtonElement).disabled=true;
            clearInterval(meta.soon_reg_end_looper[auctionid]); 
            meta.grab.auctionDetails(auctionid).then(result =>{
                if(result['bidBounds'][1]<=result['bidBounds'][3]){
                  meta.block['isRequiredmet'] = true;
                  meta.grab.currentTime().then(now =>{
                    let __timeforauclivestart = Number(result['times'][0])-Number(now);
                      meta.soon_auc_live_start_timer(auctionid,__timeforauclivestart,carousel_length)
                  });
                }
                else{
                    meta.block['isRequiredmet'] = false;
                    meta.block['isclosed'] = true;
                }
            })
            meta.block['regbtnshow'] =false;
            meta.block['timertxt'] =3;
            
        }
        if(meta.soon_reg_end_sec_shower[auctionid]!=0){
            meta.soon_reg_end_sec_shower[auctionid]--;
        }
        else{
            if(meta.soon_reg_end_hour_shower[auctionid] !=0 || meta.soon_reg_end_min_shower[auctionid] !=0 ){
                meta.soon_reg_end_sec_shower[auctionid]=59;
                if(meta.soon_reg_end_min_shower[auctionid] != 0){
                    meta.soon_reg_end_min_shower[auctionid]--;
                }
                else{
                    if(meta.soon_reg_end_hour_shower[auctionid] !=0){
                        meta.soon_reg_end_min_shower[auctionid] = 59;
                        meta.soon_reg_end_hour_shower[auctionid]--;
                    } 
                    else {
                        
                    }
                }
            }
        }
    },1000);
  }



//   triggerTimeToRefresh(){
//     let meta = this;
//     console.log("meta.timeToRefresh",meta.timeToRefresh);
//     let timeToTrigger = meta.timeToRefresh;
//     console.log(timeToTrigger,"timeToTrigger");
//     meta.refreshTimer = setTimeout(()=>{
//       console.log("meta.canTriggerRefresh",meta.canTriggerRefresh);
//       if(meta.canTriggerRefresh){
//         // meta.navigatetohome();
//       }
//     },timeToTrigger*1000);
//   }


  triggerforcarousel(){
    $('.owl-carousel').owlCarousel({
        loop: true,
        margin: 10,
        responsiveClass: true,
        responsive: {
            0: {
                items: 1,
                nav: true
            },
            600: {
                items: 2,
                nav: false
            },
            900: {
                items: 3,
                nav: false
            },
            1000: {
                items: 4,
                nav: true,
                loop: false,
                margin: 20
            }
        }
    })
  }

  ngOnInit() {
      let data=this.start;
      console.log(data);
      
        let instance = this;
        instance.block={};
        // instance.timeToRefresh = 0;
        instance.carousel_array_length = data.carousel_array_length; 
                    let obj ={};
                    obj['auctionid']=data.auctionid;
                    obj['hash']=data.hash;
                    obj['required']=data.required;
                    obj['registered']=data.registered;
                    obj['aucstarttime']=data.aucstarttime;
                    
                    obj['regstarttime'] =data.regstarttime;
                    obj['regendtime'] =data.regendtime;
                    obj['minBid']=data.minBid;
                    obj['regtxt'] =data.regtxt;
                    obj['regbtnshow'] =data.regbtnshow;
                    obj['beforereg']=data.beforereg;
                    obj['isclosed'] = data.isclosed;
                    obj['timertxt'] = data.timertxt;
                    let timeleftforregstart = Number(data.result['times'][2])-Number(data.now);
                    obj['isTimeTextforregstart'] = Number(timeleftforregstart) > 86400;
                    let timeforrefresh = 0;
                    if(Number(data.result['times'][2]) > Number(data.now)){
                        timeforrefresh = Number(data.result['times'][2]) - Number(data.now);
                       if(Number(timeforrefresh) < 86400){
                            obj["isTimeText"] = false;
                            instance.soon_reg_start_indices.push(data.auctionid);
                            instance.soon_auc_reg_starttimer(data.auctionid,timeforrefresh,instance.carousel_array_length);
                       }
                       else{
                            obj["isTimeText"] = true;
                        }
                      obj['regbtnshow'] = false;
                      obj['beforereg'] = true;
                      obj['timertxt'] = 1;
                    }
                    else if(Number(data.result['times'][3]) < Number(data.now)){
                      timeforrefresh = Number(data.result['times'][0]) - Number(data.now);
                      obj["isRequiredmet"] =Number(obj['required'])<=Number(obj['registered']);
                      
                      if(data.result['bidBounds'][1]<=data.result['bidBounds'][3]){
                          if(Number(timeforrefresh) < 86400){
                            obj["isTimeText"] = false;
                            instance.soon_auc_start_indices.push(data.auctionid);
                            instance.soon_auc_live_start_timer(data.auctionid,timeforrefresh,instance.carousel_array_length);
                          }
                          else{
                            obj["isTimeText"] = true;
                          }
                      }
                      obj['regbtnshow'] = false;
                      obj['isclosed'] = true;
                      obj['timertxt'] = 3;
                    }
                    else {
                      if(data.isPreRegistered == 1){
                        obj['regtxt'] = 'registered';
                      }
                      timeforrefresh = Number(data.result['times'][3]) - Number(data.now);
                      if(Number(timeforrefresh) < 86400){
                        obj["isTimeText"] = false;
                        instance.soon_reg_end_indices.push(data.auctionid);
                        console.log(data.auctionid,timeforrefresh,instance.carousel_array_length);
                        
                        instance.soon_auc_reg_endtimer(data.auctionid,timeforrefresh,instance.carousel_array_length,'upcoming func');
                      }
                      else{
                        obj["isTimeText"] = true;
                      }
                    }
                    // if(instance.timeToRefresh != 0){
                    //   if(instance.timeToRefresh > timeforrefresh){
                    //     instance.timeToRefresh = timeforrefresh;
                    //   }
                    // }
                    // else if(timeforrefresh != 0){
                    //   instance.timeToRefresh = timeforrefresh;
                    // }
                    instance.block=obj;               
      } 

}
